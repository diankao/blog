<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://diankao.github.io/blog/</id>
    <title>Gridea</title>
    <updated>2020-02-20T13:00:30.842Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://diankao.github.io/blog/"/>
    <link rel="self" href="https://diankao.github.io/blog/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://diankao.github.io/blog/images/avatar.png</logo>
    <icon>https://diankao.github.io/blog/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[苏州大学计算机科学与技术学院学生科技协会科研部活动策划案]]></title>
        <id>https://diankao.github.io/blog/post/su-zhou-da-xue-ji-suan-ji-ke-xue-yu-ji-zhu-xue-yuan-xue-sheng-ke-ji-xie-hui-ke-yan-bu-huo-dong-ce-hua-an</id>
        <link href="https://diankao.github.io/blog/post/su-zhou-da-xue-ji-suan-ji-ke-xue-yu-ji-zhu-xue-yuan-xue-sheng-ke-ji-xie-hui-ke-yan-bu-huo-dong-ce-hua-an">
        </link>
        <updated>2020-02-20T12:14:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="领略代码之美~代码整洁的艺术讲座"><strong>领略代码之美~代码整洁的艺术讲座</strong></h2>
<p><em>by diankao</em><br>
<a href="https://rqy.moe/uncategorized/rqy-s-Code-Style-for-OI/#more">优雅码风实例</a><br>
<a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/">python风格谷歌代码规范</a><br>
<a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/contents/">c++风格谷歌代码规范</a><br>
<a href="https://javi.blog.luogu.org/c-dai-ma-ge-shi-hua-pei-zhi-yang-xie">c++代码格式化</a></p>
<ul>
<li>
<p>活动器材</p>
<ul>
<li>多媒体讲台设备</li>
<li>参与者自备笔记本电脑</li>
</ul>
</li>
<li>
<p>活动场所</p>
<ul>
<li>一间教室</li>
</ul>
</li>
<li>
<p>活动时间</p>
<ul>
<li>一到二节晚自习</li>
</ul>
</li>
<li>
<p>活动经费</p>
<ul>
<li>代码整洁之道-55CNY</li>
</ul>
</li>
<li>
<p>活动目的<br>
代码不仅是写给机器看的，也是团队沟通方式。整洁的代码，对于程序员来说非常的一目了然，简单、整洁，结构清晰，逻辑清楚。工作中需要根据策划和甲方的需求对既往代码进行修改,如果之前的代码写的结构不清楚就难以添加。交接班时一份整洁代码也会降低工作量。团队合作时，优雅的码风促进合作效率。写开源项目时，整洁的代码会提高可用性，推广项目。<br>
在一些公司的面试当中，代码习惯不好/不够整洁的人会更容易被筛去。<br>
写整洁代码，需要遵循大量的小技巧，贯彻刻苦习得的“整洁感”。这种“代码感”就是关键所在。<br>
有些人生而有之。有些人费点劲才能得到。本次讲座的目的就是加强对代码整洁性的重视,培养对代码的&quot;整洁感&quot;，提高就业能力和项目协作能力。</p>
</li>
<li>
<p>活动步骤</p>
<ul>
<li>以若干&quot;虽然我不知道为什么但是它能运行&quot;表情包引入讲解优雅码风的必要性</li>
<li>讲解优雅码风的组成，命名规则，讲解好代码和糟糕的代码之间的区别：如何编写好代码，如何将糟糕的代码转化为好代码：如何创建好名称、好函数、好对象和好类；如何格式化代码以实现其可读性的最大化：如何在不妨碍代码逻辑的前提下充分实现错误处理；如何进行单元测试和测试驱动开发。</li>
<li>实践c++代码格式化/实践随机抽选若干幸运观众修改一个丑陋的python程序为一个优雅的python程序</li>
<li>互动环节,比赛读一段代码的代码目的速度,给小奖品</li>
</ul>
</li>
<li>
<p>总结<br>
  写代码，本质上写法与中学数学大题无异，写的过程和解答都需要兼顾。实现了业务功能的代码只是作为一个开始，软件的生命周期决定了它后期还需要人来持续的维护，而不同的人代码风格迥异。整洁代码就如同一门语言，让不同国家的人通过它都能很好的欣赏到作品本身的美。它就像一件艺术品，乍一看你可能看不懂，但你深入进去就会深深感受到代码身后的魅力。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[some of紫书笔记]]></title>
        <id>https://diankao.github.io/blog/post/some-of-zi-shu-bi-ji</id>
        <link href="https://diankao.github.io/blog/post/some-of-zi-shu-bi-ji">
        </link>
        <updated>2020-02-15T14:42:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="例题5-5-uva12096"><strong>例题5-5 UVa12096</strong></h3>
<ol>
<li>长且不重复的指令只读第一个字母</li>
<li>将难以存储的实体哈希化,分配一个ID</li>
<li>typedef 是个好东西</li>
<li>set_union(x1.begin(), x1.end(), x2.begin(), x2.end(), inserter(x, x.end()))<br>
使用宏定义#define ALL(x) x.begin(),x.end()和定义#define INS(x) inserter(x,x.begin())可以把一堆参数简写为set_union(ALL(x),INS(x));</li>
</ol>
<h3 id="例题5-7-uva136"><strong>例题5-7 Uva136</strong></h3>
<ol>
<li>优先队列是排序不去重的,如果要去重,和队列同时写个set,对每个入队元素检查set里的count</li>
<li>prioritry_queue&lt;int, vector<int>, greater<int> &gt;pq;中两个&gt;&gt;不要连在一起,会使得编译器误认为是&gt;&gt;运算符</li>
<li>优先队列最先出队列的元素是队列中优先级最高的元素(top()取队首元素),默认为大数优先
<ol>
<li>prioritry_queue&lt;int, vector<int>, greater<int> &gt;pq ,小数优先</li>
<li>prioritry_queue&lt;int, vector<int>, cmp&gt; &gt;pq; // 然后重载'()'运算符<br>
struct cmp{<br>
bool operactor()(const int a,const int b) const{<br>
return a%10&lt;b%10;//如果a的优先级比b小,则返回ture<br>
}<br>
}</li>
</ol>
</li>
<li>push(),pop(),top()</li>
</ol>
<h3 id="随机数发生器"><strong>随机数发生器</strong></h3>
<ol>
<li>rand()不仅是伪随机数,而且生成范围是[0,RAND_MAX],而RAND_MAX 一般为2^15-1;</li>
<li>虽然可以执行srand(time(NULL)),但是由于time的精度是秒,所以会导致一秒钟内多次执行的程序随机出同样的结果</li>
</ol>
<h3 id="引用传参方式可以减少指针的应用"><strong>引用传参方式(&amp;)可以减少指针的应用</strong></h3>
<h3 id="测试程序"><strong>测试程序</strong></h3>
<ol>
<li>测试程序中常用assert(表达式)当表达式为假时强行终止程序,并给出错误提示</li>
<li>abort()<br>
立即终止当前进程，产生异常程序终止<br>
进程终止时不会销毁任何对象</li>
<li>exit<br>
<img src="https://img-blog.csdn.net/20180608111123895?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p0X3hjeWs=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="exit" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[test]]></title>
        <id>https://diankao.github.io/blog/post/test</id>
        <link href="https://diankao.github.io/blog/post/test">
        </link>
        <updated>2020-02-08T15:30:09.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://diankao.github.io/blog//post-images/1581177188533.jpg">tupian</a><br>
<a href="http://luogu.org">洛谷</a><br>
<a href="https://github.com/getgridea/gridea">Github</a></p>
<ul>
<li>列表</li>
<li>列表</li>
</ul>
<ol>
<li>列表</li>
<li>李彪
<ol>
<li>列表</li>
<li>列表</li>
</ol>
</li>
</ol>
<pre><code>如果（很棒）{
  返回真
}
</code></pre>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content from cell 1</td>
<td>Content from cell 2</td>
</tr>
<tr>
<td>Content in the first column</td>
<td>Content in the second column</td>
</tr>
</tbody>
</table>
<p>flow<br>
st=&gt;start: 开始<br>
op=&gt;operation: My Operation<br>
cond=&gt;condition: Yes or No?<br>
e=&gt;end<br>
st-&gt;op-&gt;cond<br>
cond(yes)-&gt;e<br>
cond(no)-&gt;op<br>
&amp;</p>
]]></content>
    </entry>
</feed>